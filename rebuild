#!/bin/sh -eu

# PS4='+ $(date "+%s.%N")\011 '
# exec 2>/tmp/bashstart.$$.log
# set -x

: ${P:=''}
: ${D:=''}

TARGETS=""
LASTLOCK=""
PARENTPID="$$"
PIDS=""

trap _cleanup EXIT
trap _exception INT TERM

_cleanup() {
	trap - EXIT
	if [ -d "${T:-}" ]; then
		rm -rf "$T"
		_dbg "_cleanup $T"
	fi
}

_exception() {
	local c="${1:-0}"
	_cleanup
	trap - INT TERM
	kill -INT "-$PARENTPID"
	exit "$c"
}

_err() {
	local c="$1"; shift
	echo >&2 "${0##*/}: error: $*"
	_exception $c
}

_dir="${XDG_RUNTIME_DIR:-${TMP:-/tmp}}"
T="$(mktemp -d "${_dir}/${0##*/}.XXXXXX" 2>/dev/null || true)"

[ -d "${T:-}" ] || _err 1 "temp missing"

_dbg() { [ "$D" ] || return 0; echo >&2 "$@"; }

# TODO build dir parametric
# TODO build dir in tmp in mem outside project

unset CDPATH

alias Q='>/dev/null'

DO() {
	local cmd="$BUILD/$1"; shift
	_dbg DO "$cmd" "$@"
	WANT "$cmd"
	[ -f "$cmd" ] || _err 1 "command missing: $cmd"
	[ -x "$cmd" ] || _err 1 "command noexec: $cmd"
	if "$cmd" "$@"; then
		return 0
	else
		return $?
	fi
}

TFIND() {
	# TODO check VPATH
	local t IFS=: w="$1"
	for t in $TARGETS; do
		case "$t" in
			"$w")   echo "$t"; return 0;;
			*/"$w") echo "$t"; return 0;;
		esac
	done
	echo >&2 $TARGETS
	_err 8 "not found: $w"
}

OK() {
	local d t="$1" code=0; shift
	[ -e "$t" ] || code=1
	for d; do
 		[ "$t" -ef "$d" ] && _err 8 "same file in ok: $t vs $d"
		[ -e "$d" ] || _err 8 "deps not exist: $d"
		WANT "$d"
		[ $code -eq 0 -a "$d" -nt "$t" ] && code=1
	done

	return $code
}

LOCK() {
	local f
	LASTLOCK=""
	for f; do
		TARGETS="${TARGETS}${f}:"
		LASTLOCK="${LASTLOCK}${f}:"
	done
}

_lock() {
	local f fd=3 IFS=:
	for f in $LASTLOCK; do
		mkdir -p "$T/$f"
		eval "exec $fd< '$T/$f'"
		flock -n $fd || _err 8 "lock failed: $f" 
		_dbg LOCK "$f"
		: $(( fd++ ))
	done
}

WANT() {
	[ "$P" ] || return 0
	local t IFS=: w="$1"
	_dbg WANT $w
	[ -e "$w" ] || w="$(TFIND "$w")"
	if [ -e "$T/$w" ]; then
		exec 7< "$T/$w" || _err 5 "WANT: no access: $w"
		_dbg WAIT $w
		flock -s 7
		exec 7<&-
	fi
	_dbg ACCESS $w
}

LD() {
	local t="$BUILD/$1"; shift
	_dbg LD "$t" "$@"
	LOCK "$t"
	OK "$t" "$@" ||    
		RRR $CC $CFLAGS $LDFLAGS -o "$t" "$@"
}

RE() {
	local rule="_rule_${1##*.}"
	Q command -v "$rule" || _err 8 "no rule for: $1"
	"$rule" "$@"
}

_rule_c() {
	local t h o b c="$1"
	[ -e "$c" ] || c="$(TFIND "$c")"
	b="${c##*/}"
	o="${b%.c}.o"
    t="$BUILD/$o"

	LOCK "$t" 
	WANT "$c"

	set --
	for h in $($CPP $CFLAGS -MM -MG "$c"); do
		case "$h" in
			(\\|"$o:"|"$t:"|"$c") continue;;
		esac
		[ -e "$h" ] || h="$(TFIND "$h")"
		set -- "$@" "$h"
	done

	OK "$t" "$c" "$@" || RRR $CC $CFLAGS -c -o "$t" "$c"
}

_rule_peg() {
	local p="$1"
	[ -e "$p" ] || p="$(TFIND "$p")"
	local b="${1##*/}"
	b="${b%.peg}"
	local c="$BUILD/${b}.c" h="$BUILD/${b}.h"

	LOCK "$c" "$h"
	WANT packcc
	OK "$c" "$p" || RRR _peg "$p" "$b"
}

_peg() {
	local old="$PWD"
	cd "$BUILD"
	./packcc -o "$2" "$old/$1" || _err 8 "packcc"
	cd "$old"
}

_sem() {
	exec 9< "$0"
	flock 9
}

_semgo() {
	flock -u 9
}

_semwait() {
	exec 8< "$0"
	flock -s 8
	exec 8<&- 9<&-
}

RRR() {
	_dbg RRR "$@"
	if [ "$P" ]; then
		_sem
		( 
			_lock
			_semgo
			"$@" || _err 8 "RRR: $*"
			_dbg BG RRR DONE "$@"
		) &
		PIDS="$PIDS $!"
		_semwait
		_dbg BG RRR "$@"
	else
		"$@" || _err 8 "RRR: $*"
		_dbg RRR DONE "$@"
	fi
}

/bin/sh -n ./buildfile
. ./buildfile

: ${CC:=cc}
: ${CPP:=cpp}
: ${CFLAGS:=}
: ${LDFLAGS:=}
: ${BUILD:=build}

Q command -v clean || clean() { rm -rf $BUILD/; echo '- $BUILD/'; } 

[ $# -gt 0 ] || set -- build

for arg; do
	Q command -v "$arg" || _err 8 "no such target: $arg"
	eval "$arg"
	for p in $PIDS; do
		wait $p
	done
	PIDS=""
done

