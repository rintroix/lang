%auxil "tb_stack_ref_t"
%value "struct ast"

%source {
#include <stdio.h>
#include <string.h>
}

%header {
#include "common.h"
}

top <- _* l:list _* { $$ = l; } / _* !.

list <- '(' _*            ')' { $$ = list0(); }
      / '(' _* a:atom  _* ')' { $$ = list1(a); }
      / '(' _* i:inner _* ')' { $$ = i; }

inner <- d:dot  { $$ = d; }
       / o:oper { $$ = o; }
	   / m:many { $$ = m; }

oper <- l:operand _+ <op> _+ r:operand { $$ = oper(tb_strdup($1), l, r); } 

dot <- l:dotand _+ '.' _+ r:dotand { $$ = append(l, r); }

operand <- i:inner { $$ = i; }
         / a:atom  { $$ = a; }

dotand <- i:inner { $$ = i; }
        / a:atom  { $$ = list1(a); }

many <- { push(auxil, (ast){0}); } matom (_+ matom)+ { $$ = list(auxil); }

matom <- l:list { push(auxil, l); }
       / w:word { push(auxil, w); }

atom <- l:list { $$ = l; }
      / w:word { $$ = w; }

op <- !'.' opchar / opchar opchar+ 

opchar <- [!#$%&*+-./:;<=>?@\[\\\]^_`{|}~]

word <- [_a-zA-Z0-9-]+ { $$ = word(tb_strdup($0)); }

_ <- [ \t\n]

# 0123456789
# ABCDEFGHIJKLMNOPQRSTUVWXYZ
# abcdefghijklmnopqrstuvwxyz
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

